name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送标签为v开头时触发，如v1.0.0

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: context.ref.replace('refs/tags/', ''),
              draft: true,
              generate_release_notes: true
            });
            return {
              result: data.id,
              upload_url: data.upload_url
            }

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            build_command: build:win
            artifact_name: win
            artifact_path: dist/*.exe
          - os: macos-latest
            build_command: build:mac
            artifact_name: mac
            artifact_path: dist/*.dmg
          - os: ubuntu-latest
            build_command: build:linux
            artifact_name: linux
            artifact_path: dist/*.AppImage

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build application
        run: pnpm run ${{ matrix.build_command }}
      
      - name: Upload artifacts to release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const { globby } = await import('globby');
            
            const path = require('path');
            const artifacts = await globby(['${{ matrix.artifact_path }}']);
            
            for (const artifactPath of artifacts) {
              const filename = path.basename(artifactPath);
              const fileBytes = await fs.readFile(artifactPath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: filename,
                data: fileBytes
              });
              
              console.log(`Uploaded ${filename} to release`);
            }

  publish-release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.RELEASE_ID,
              draft: false
            });
            console.log('Release published successfully!');
