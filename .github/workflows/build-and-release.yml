name: Build and Release (Windows Only)

on:
  push:
    tags:
      - 'v*'  # 推送 v 开头标签触发

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    env:
      GITHUB_TOKEN: ${{ secrets.Token }}  # 你的 Personal Access Token

    steps:
      # 1️⃣ 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3️⃣ 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      # 4️⃣ 获取 pnpm store 路径 - 修复PowerShell环境变量设置方式
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: pwsh
        run: echo "STORE_PATH=$(pnpm store path)" >> $env:GITHUB_ENV

      # 5️⃣ 缓存 pnpm - 修复path参数缺失问题
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: windows-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            windows-pnpm-store-

      # 6️⃣ 安装依赖
      - name: Install dependencies
        run: pnpm install

      # 7️⃣ 构建应用
      - name: Build Windows application
        run: pnpm run build:win

      # 查找实际的 .exe 文件
      - name: Find executable path
        id: find-exe
        shell: pwsh
        run: |
          $exePath = Get-ChildItem "dist" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
          if ($exePath) {
            echo "EXE_PATH=$exePath" >> $env:GITHUB_ENV
            echo "EXE_NAME=$(Split-Path $exePath -Leaf)" >> $env:GITHUB_ENV
            echo "Found executable: $exePath"
          } else {
            echo "::error::No .exe file found in dist directory!"
            exit 1
          }

      # 8️⃣ 创建 Release（Draft）
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false

      # 9️⃣ 上传构建产物 - 使用找到的具体文件路径
      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXE_PATH }}
          asset_name: selfstu-vue-Setup-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      # 🔟 发布 Release
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Token }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: parseInt('${{ steps.create_release.outputs.id }}'),
              draft: false
            });
            console.log('Release published successfully!');
