name: Release Electron App

on:
  push:
    tags:
      - 'v*' # 只在打 tag 的时候触发，比如 v1.0.0

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ fromJSON(steps.create-release.outputs.result).id }}
      upload_url: ${{ fromJSON(steps.create-release.outputs.result).upload_url }}
    steps:
      - name: Create GitHub Release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: context.ref.replace('refs/tags/', ''),
              draft: false,
              prerelease: false
            });
            return { id: data.id, upload_url: data.upload_url };

  build:
    needs: create-release
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            build_script: build:win
            artifact_path: dist/*.exe
          - os: macos-latest
            build_script: build:mac
            artifact_path: dist/*.dmg
          - os: ubuntu-latest
            build_script: build:linux
            artifact_path: dist/*.AppImage
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Electron app
        run: pnpm ${{ matrix.build_script }}

      - name: Upload artifacts to release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');

            const dir = path.dirname('${{ matrix.artifact_path }}');
            const ext = path.extname('${{ matrix.artifact_path }}');

            const files = await fs.readdir(dir);
            const artifacts = files.filter(f => f.endsWith(ext));

            for (const filename of artifacts) {
              const artifactPath = path.join(dir, filename);
              const fileBytes = await fs.readFile(artifactPath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.RELEASE_ID,
                name: filename,
                data: fileBytes
              });

              console.log(`✅ Uploaded ${filename} to release`);
            }
